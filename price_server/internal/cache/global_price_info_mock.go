// Code generated by MockGen. DO NOT EDIT.
// Source: global_price_info.go

// Package cache is a generated GoMock package.
package cache

import (
	conf "price_api/price_server/config"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGlobalPriceInfoCache is a mock of GlobalPriceInfoCache interface.
type MockGlobalPriceInfoCache struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalPriceInfoCacheMockRecorder
}

// MockGlobalPriceInfoCacheMockRecorder is the mock recorder for MockGlobalPriceInfoCache.
type MockGlobalPriceInfoCacheMockRecorder struct {
	mock *MockGlobalPriceInfoCache
}

// NewMockGlobalPriceInfoCache creates a new mock instance.
func NewMockGlobalPriceInfoCache(ctrl *gomock.Controller) *MockGlobalPriceInfoCache {
	mock := &MockGlobalPriceInfoCache{ctrl: ctrl}
	mock.recorder = &MockGlobalPriceInfoCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalPriceInfoCache) EXPECT() *MockGlobalPriceInfoCacheMockRecorder {
	return m.recorder
}

// GetCacheLength mocks base method.
func (m *MockGlobalPriceInfoCache) GetCacheLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCacheLength indicates an expected call of GetCacheLength.
func (mr *MockGlobalPriceInfoCacheMockRecorder) GetCacheLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheLength", reflect.TypeOf((*MockGlobalPriceInfoCache)(nil).GetCacheLength))
}

// GetLatestPriceInfos mocks base method.
func (m *MockGlobalPriceInfoCache) GetLatestPriceInfos() conf.PriceInfos {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPriceInfos")
	ret0, _ := ret[0].(conf.PriceInfos)
	return ret0
}

// GetLatestPriceInfos indicates an expected call of GetLatestPriceInfos.
func (mr *MockGlobalPriceInfoCacheMockRecorder) GetLatestPriceInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPriceInfos", reflect.TypeOf((*MockGlobalPriceInfoCache)(nil).GetLatestPriceInfos))
}

// GetPriceInfosByRange mocks base method.
func (m *MockGlobalPriceInfoCache) GetPriceInfosByRange(start, end int) conf.PriceInfosCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceInfosByRange", start, end)
	ret0, _ := ret[0].(conf.PriceInfosCache)
	return ret0
}

// GetPriceInfosByRange indicates an expected call of GetPriceInfosByRange.
func (mr *MockGlobalPriceInfoCacheMockRecorder) GetPriceInfosByRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceInfosByRange", reflect.TypeOf((*MockGlobalPriceInfoCache)(nil).GetPriceInfosByRange), start, end)
}

// GetPriceInfosEqualTimestamp mocks base method.
func (m *MockGlobalPriceInfoCache) GetPriceInfosEqualTimestamp(timestamp int64) (bool, conf.PriceInfos) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceInfosEqualTimestamp", timestamp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(conf.PriceInfos)
	return ret0, ret1
}

// GetPriceInfosEqualTimestamp indicates an expected call of GetPriceInfosEqualTimestamp.
func (mr *MockGlobalPriceInfoCacheMockRecorder) GetPriceInfosEqualTimestamp(timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceInfosEqualTimestamp", reflect.TypeOf((*MockGlobalPriceInfoCache)(nil).GetPriceInfosEqualTimestamp), timestamp)
}

// UpdateCachePrice mocks base method.
func (m *MockGlobalPriceInfoCache) UpdateCachePrice(infos conf.PriceInfos, maxMemTime int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCachePrice", infos, maxMemTime)
}

// UpdateCachePrice indicates an expected call of UpdateCachePrice.
func (mr *MockGlobalPriceInfoCacheMockRecorder) UpdateCachePrice(infos, maxMemTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachePrice", reflect.TypeOf((*MockGlobalPriceInfoCache)(nil).UpdateCachePrice), infos, maxMemTime)
}

// UpdateSymbolWeight mocks base method.
func (m *MockGlobalPriceInfoCache) UpdateSymbolWeight(symbol, exchange string, weight int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSymbolWeight", symbol, exchange, weight)
}

// UpdateSymbolWeight indicates an expected call of UpdateSymbolWeight.
func (mr *MockGlobalPriceInfoCacheMockRecorder) UpdateSymbolWeight(symbol, exchange, weight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSymbolWeight", reflect.TypeOf((*MockGlobalPriceInfoCache)(nil).UpdateSymbolWeight), symbol, exchange, weight)
}
