// Code generated by MockGen. DO NOT EDIT.
// Source: price_api/price_server/internal/cache (interfaces: GlobalRequestPriceConfs)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	"price_api/price_server/internal/config"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGlobalRequestPriceConfs is a mock of GlobalRequestPriceConfs interface.
type MockGlobalRequestPriceConfs struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRequestPriceConfsMockRecorder
}

// MockGlobalRequestPriceConfsMockRecorder is the mock recorder for MockGlobalRequestPriceConfs.
type MockGlobalRequestPriceConfsMockRecorder struct {
	mock *MockGlobalRequestPriceConfs
}

// NewMockGlobalRequestPriceConfs creates a new mock instance.
func NewMockGlobalRequestPriceConfs(ctrl *gomock.Controller) *MockGlobalRequestPriceConfs {
	mock := &MockGlobalRequestPriceConfs{ctrl: ctrl}
	mock.recorder = &MockGlobalRequestPriceConfsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRequestPriceConfs) EXPECT() *MockGlobalRequestPriceConfsMockRecorder {
	return m.recorder
}

// GetConfs mocks base method.
func (m *MockGlobalRequestPriceConfs) GetConfs() map[string][]conf.ExchangeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfs")
	ret0, _ := ret[0].(map[string][]conf.ExchangeConfig)
	return ret0
}

// GetConfs indicates an expected call of GetConfs.
func (mr *MockGlobalRequestPriceConfsMockRecorder) GetConfs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfs", reflect.TypeOf((*MockGlobalRequestPriceConfs)(nil).GetConfs))
}

// GetConfsBySymbol mocks base method.
func (m *MockGlobalRequestPriceConfs) GetConfsBySymbol(arg0 string) []conf.ExchangeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfsBySymbol", arg0)
	ret0, _ := ret[0].([]conf.ExchangeConfig)
	return ret0
}

// GetConfsBySymbol indicates an expected call of GetConfsBySymbol.
func (mr *MockGlobalRequestPriceConfsMockRecorder) GetConfsBySymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfsBySymbol", reflect.TypeOf((*MockGlobalRequestPriceConfs)(nil).GetConfsBySymbol), arg0)
}

// SetConfs mocks base method.
func (m *MockGlobalRequestPriceConfs) SetConfs(arg0 map[string][]conf.ExchangeConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfs", arg0)
}

// SetConfs indicates an expected call of SetConfs.
func (mr *MockGlobalRequestPriceConfsMockRecorder) SetConfs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfs", reflect.TypeOf((*MockGlobalRequestPriceConfs)(nil).SetConfs), arg0)
}

// UpdateSymbolWeight mocks base method.
func (m *MockGlobalRequestPriceConfs) UpdateSymbolWeight(arg0, arg1 string, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSymbolWeight", arg0, arg1, arg2)
}

// UpdateSymbolWeight indicates an expected call of UpdateSymbolWeight.
func (mr *MockGlobalRequestPriceConfsMockRecorder) UpdateSymbolWeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSymbolWeight", reflect.TypeOf((*MockGlobalRequestPriceConfs)(nil).UpdateSymbolWeight), arg0, arg1, arg2)
}
