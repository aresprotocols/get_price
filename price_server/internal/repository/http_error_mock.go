// Code generated by MockGen. DO NOT EDIT.
// Source: http_error.go

// Package repository is a generated GoMock package.
package repository

import (
	vo "price_api/price_server/internal/vo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpErrorRepository is a mock of HttpErrorRepository interface.
type MockHttpErrorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHttpErrorRepositoryMockRecorder
}

// MockHttpErrorRepositoryMockRecorder is the mock recorder for MockHttpErrorRepository.
type MockHttpErrorRepositoryMockRecorder struct {
	mock *MockHttpErrorRepository
}

// NewMockHttpErrorRepository creates a new mock instance.
func NewMockHttpErrorRepository(ctrl *gomock.Controller) *MockHttpErrorRepository {
	mock := &MockHttpErrorRepository{ctrl: ctrl}
	mock.recorder = &MockHttpErrorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpErrorRepository) EXPECT() *MockHttpErrorRepositoryMockRecorder {
	return m.recorder
}

// GetHttpErrorInfo mocks base method.
func (m *MockHttpErrorRepository) GetHttpErrorInfo(idx, pageSize int, symbol string) ([]vo.HTTP_ERROR_INFO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttpErrorInfo", idx, pageSize, symbol)
	ret0, _ := ret[0].([]vo.HTTP_ERROR_INFO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHttpErrorInfo indicates an expected call of GetHttpErrorInfo.
func (mr *MockHttpErrorRepositoryMockRecorder) GetHttpErrorInfo(idx, pageSize, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttpErrorInfo", reflect.TypeOf((*MockHttpErrorRepository)(nil).GetHttpErrorInfo), idx, pageSize, symbol)
}

// GetTotalHttpErrorInfo mocks base method.
func (m *MockHttpErrorRepository) GetTotalHttpErrorInfo(symbol string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalHttpErrorInfo", symbol)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalHttpErrorInfo indicates an expected call of GetTotalHttpErrorInfo.
func (mr *MockHttpErrorRepositoryMockRecorder) GetTotalHttpErrorInfo(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalHttpErrorInfo", reflect.TypeOf((*MockHttpErrorRepository)(nil).GetTotalHttpErrorInfo), symbol)
}

// InsertHttpError mocks base method.
func (m *MockHttpErrorRepository) InsertHttpError(url, symbol, errorInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHttpError", url, symbol, errorInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHttpError indicates an expected call of InsertHttpError.
func (mr *MockHttpErrorRepositoryMockRecorder) InsertHttpError(url, symbol, errorInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHttpError", reflect.TypeOf((*MockHttpErrorRepository)(nil).InsertHttpError), url, symbol, errorInfo)
}
