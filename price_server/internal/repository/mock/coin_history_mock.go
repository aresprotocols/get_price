// Code generated by MockGen. DO NOT EDIT.
// Source: price_api/price_server/internal/repository (interfaces: CoinHistoryRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	conf "price_api/price_server/config"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoinHistoryRepository is a mock of CoinHistoryRepository interface.
type MockCoinHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoinHistoryRepositoryMockRecorder
}

// MockCoinHistoryRepositoryMockRecorder is the mock recorder for MockCoinHistoryRepository.
type MockCoinHistoryRepositoryMockRecorder struct {
	mock *MockCoinHistoryRepository
}

// NewMockCoinHistoryRepository creates a new mock instance.
func NewMockCoinHistoryRepository(ctrl *gomock.Controller) *MockCoinHistoryRepository {
	mock := &MockCoinHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockCoinHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinHistoryRepository) EXPECT() *MockCoinHistoryRepositoryMockRecorder {
	return m.recorder
}

// GetHistoryBySymbol mocks base method.
func (m *MockCoinHistoryRepository) GetHistoryBySymbol(arg0, arg1 int, arg2 string) ([]conf.PriceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryBySymbol", arg0, arg1, arg2)
	ret0, _ := ret[0].([]conf.PriceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryBySymbol indicates an expected call of GetHistoryBySymbol.
func (mr *MockCoinHistoryRepositoryMockRecorder) GetHistoryBySymbol(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryBySymbol", reflect.TypeOf((*MockCoinHistoryRepository)(nil).GetHistoryBySymbol), arg0, arg1, arg2)
}

// GetHistoryBySymbolAndTimestamp mocks base method.
func (m *MockCoinHistoryRepository) GetHistoryBySymbolAndTimestamp(arg0 string, arg1 int64) ([]conf.PriceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryBySymbolAndTimestamp", arg0, arg1)
	ret0, _ := ret[0].([]conf.PriceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryBySymbolAndTimestamp indicates an expected call of GetHistoryBySymbolAndTimestamp.
func (mr *MockCoinHistoryRepositoryMockRecorder) GetHistoryBySymbolAndTimestamp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryBySymbolAndTimestamp", reflect.TypeOf((*MockCoinHistoryRepository)(nil).GetHistoryBySymbolAndTimestamp), arg0, arg1)
}

// GetHistoryByTimestamp mocks base method.
func (m *MockCoinHistoryRepository) GetHistoryByTimestamp(arg0 int64) ([]conf.PriceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryByTimestamp", arg0)
	ret0, _ := ret[0].([]conf.PriceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryByTimestamp indicates an expected call of GetHistoryByTimestamp.
func (mr *MockCoinHistoryRepositoryMockRecorder) GetHistoryByTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryByTimestamp", reflect.TypeOf((*MockCoinHistoryRepository)(nil).GetHistoryByTimestamp), arg0)
}

// GetTotalHistoryBySymbol mocks base method.
func (m *MockCoinHistoryRepository) GetTotalHistoryBySymbol(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalHistoryBySymbol", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalHistoryBySymbol indicates an expected call of GetTotalHistoryBySymbol.
func (mr *MockCoinHistoryRepositoryMockRecorder) GetTotalHistoryBySymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalHistoryBySymbol", reflect.TypeOf((*MockCoinHistoryRepository)(nil).GetTotalHistoryBySymbol), arg0)
}

// InsertPriceInfo mocks base method.
func (m *MockCoinHistoryRepository) InsertPriceInfo(arg0 conf.PriceInfos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPriceInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPriceInfo indicates an expected call of InsertPriceInfo.
func (mr *MockCoinHistoryRepositoryMockRecorder) InsertPriceInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPriceInfo", reflect.TypeOf((*MockCoinHistoryRepository)(nil).InsertPriceInfo), arg0)
}
